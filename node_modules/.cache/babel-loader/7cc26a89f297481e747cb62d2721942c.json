{"ast":null,"code":"import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { get_all_products, get_productByCategory, get_singleProductDetail, get_sortProductPrice } from \"../effects/get-products\";\nimport { ActionTypes } from \"../constant/actions\";\n\n// import { ROUTES } from \"../constants/route\";\n// import * as HttpStatus from \"http-status-codes\";\nfunction* watchGetData() {\n  // #region Section :- Document\n  yield takeLatest(ActionTypes.GET_PRODUCTS.GET_PRODUCTS_FETCH_DATA, get_Products);\n  yield takeLatest(ActionTypes.GET_PRODUCTS.GET_PRODUCT_BY_CATEGORY_DATA, get_Productt_By_Category);\n  yield takeLatest(ActionTypes.GET_PRODUCTS.GET_SINGLE_PRODUCT_DATA, get_Single_ProductDetail);\n  yield takeLatest(ActionTypes.GET_PRODUCTS.SORT_PRODUCT_PRICE, get_Sort_ProductPrice); // #endregion\n} // get all product list\n\n\nfunction* get_Products() {\n  try {\n    const response = yield call(get_all_products);\n    yield put({\n      type: ActionTypes.GET_PRODUCTS.GET_PRODUCTS_FETCH_DATA_SUCCESS,\n      payload: response\n    });\n  } catch (err) {\n    console.log(err);\n  }\n} // to fetch the product based on category  \n\n\nfunction* get_Productt_By_Category(action) {\n  try {\n    const response = yield call(get_productByCategory, action.payload);\n\n    if (response != undefined) {\n      yield put({\n        type: ActionTypes.GET_PRODUCTS.GET_PRODUCT_BY_CATEGORY_DATA_SUCCESS,\n        payload: response\n      });\n    }\n  } catch (err) {\n    console.log(err);\n  }\n} // get the single product details\n\n\nfunction* get_Single_ProductDetail(action) {\n  try {\n    const response = yield call(get_singleProductDetail, action.payload);\n    console.log(\"response\", response);\n\n    if (response != undefined) {\n      yield put({\n        type: ActionTypes.GET_PRODUCTS.GET_SINGLE_PRODUCT_DATA_SUCCESS,\n        payload: response\n      });\n    }\n  } catch (err) {\n    console.log(err);\n  }\n} // get the product list  based on price sorting\n\n\nfunction* get_Sort_ProductPrice(action) {\n  try {\n    const response = yield call(get_sortProductPrice, action.payload);\n\n    if (response != undefined) {\n      yield put({\n        type: ActionTypes.GET_PRODUCTS.SORT_PRODUCT_PRICE_SUCCESS,\n        payload: response\n      });\n    }\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport default function* getProductList() {\n  yield all([watchGetData()]);\n}","map":{"version":3,"names":["all","call","put","takeLatest","get_all_products","get_productByCategory","get_singleProductDetail","get_sortProductPrice","ActionTypes","watchGetData","GET_PRODUCTS","GET_PRODUCTS_FETCH_DATA","get_Products","GET_PRODUCT_BY_CATEGORY_DATA","get_Productt_By_Category","GET_SINGLE_PRODUCT_DATA","get_Single_ProductDetail","SORT_PRODUCT_PRICE","get_Sort_ProductPrice","response","type","GET_PRODUCTS_FETCH_DATA_SUCCESS","payload","err","console","log","action","undefined","GET_PRODUCT_BY_CATEGORY_DATA_SUCCESS","GET_SINGLE_PRODUCT_DATA_SUCCESS","SORT_PRODUCT_PRICE_SUCCESS","getProductList"],"sources":["C:/Users/vpnuser/Desktop/task/adobe/src/saga/get-products.tsx"],"sourcesContent":["import { all, call, put, takeLatest } from \"redux-saga/effects\";\r\nimport { get_all_products, get_productByCategory, get_singleProductDetail, get_sortProductPrice } from \"../effects/get-products\";\r\nimport { ActionTypes } from \"../constant/actions\";\r\nimport { history } from \"../store/config\";\r\n// import { ROUTES } from \"../constants/route\";\r\n// import * as HttpStatus from \"http-status-codes\";\r\n\r\n\r\nfunction* watchGetData() {\r\n    // #region Section :- Document\r\n    yield takeLatest(ActionTypes.GET_PRODUCTS.GET_PRODUCTS_FETCH_DATA, get_Products);\r\n    yield takeLatest(ActionTypes.GET_PRODUCTS.GET_PRODUCT_BY_CATEGORY_DATA, get_Productt_By_Category);\r\n    yield takeLatest(ActionTypes.GET_PRODUCTS.GET_SINGLE_PRODUCT_DATA, get_Single_ProductDetail);\r\n    yield takeLatest(ActionTypes.GET_PRODUCTS.SORT_PRODUCT_PRICE, get_Sort_ProductPrice);\r\n    // #endregion\r\n}\r\n\r\n// get all product list\r\nfunction* get_Products(): any {\r\n    try {\r\n        const response = yield call(get_all_products)\r\n        yield put({ type: ActionTypes.GET_PRODUCTS.GET_PRODUCTS_FETCH_DATA_SUCCESS, payload: response });\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\n// to fetch the product based on category  \r\nfunction* get_Productt_By_Category(action: any): any {\r\n    try {\r\n        const response = yield call(get_productByCategory, action.payload);\r\n        if (response != undefined) {\r\n            yield put({\r\n                type: ActionTypes.GET_PRODUCTS.GET_PRODUCT_BY_CATEGORY_DATA_SUCCESS,\r\n                payload: response,\r\n            });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\n// get the single product details\r\nfunction* get_Single_ProductDetail(action: any): any {\r\n    try {\r\n        const response = yield call(get_singleProductDetail, action.payload);\r\n        console.log(\"response\", response)\r\n        if (response != undefined) {\r\n            yield put({\r\n                type: ActionTypes.GET_PRODUCTS.GET_SINGLE_PRODUCT_DATA_SUCCESS,\r\n                payload: response,\r\n            });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\n// get the product list  based on price sorting\r\nfunction* get_Sort_ProductPrice(action: any): any {\r\n    try {\r\n        const response = yield call(get_sortProductPrice, action.payload);\r\n        if (response != undefined) {\r\n            yield put({\r\n                type: ActionTypes.GET_PRODUCTS.SORT_PRODUCT_PRICE_SUCCESS,\r\n                payload: response,\r\n            });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\n\r\nexport default function* getProductList() {\r\n    yield all([watchGetData()]);\r\n}\r\n"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AACA,SAASC,gBAAT,EAA2BC,qBAA3B,EAAkDC,uBAAlD,EAA2EC,oBAA3E,QAAuG,yBAAvG;AACA,SAASC,WAAT,QAA4B,qBAA5B;;AAEA;AACA;AAGA,UAAUC,YAAV,GAAyB;EACrB;EACA,MAAMN,UAAU,CAACK,WAAW,CAACE,YAAZ,CAAyBC,uBAA1B,EAAmDC,YAAnD,CAAhB;EACA,MAAMT,UAAU,CAACK,WAAW,CAACE,YAAZ,CAAyBG,4BAA1B,EAAwDC,wBAAxD,CAAhB;EACA,MAAMX,UAAU,CAACK,WAAW,CAACE,YAAZ,CAAyBK,uBAA1B,EAAmDC,wBAAnD,CAAhB;EACA,MAAMb,UAAU,CAACK,WAAW,CAACE,YAAZ,CAAyBO,kBAA1B,EAA8CC,qBAA9C,CAAhB,CALqB,CAMrB;AACH,C,CAED;;;AACA,UAAUN,YAAV,GAA8B;EAC1B,IAAI;IACA,MAAMO,QAAQ,GAAG,MAAMlB,IAAI,CAACG,gBAAD,CAA3B;IACA,MAAMF,GAAG,CAAC;MAAEkB,IAAI,EAAEZ,WAAW,CAACE,YAAZ,CAAyBW,+BAAjC;MAAkEC,OAAO,EAAEH;IAA3E,CAAD,CAAT;EACH,CAHD,CAGE,OAAOI,GAAP,EAAY;IACVC,OAAO,CAACC,GAAR,CAAYF,GAAZ;EACH;AACJ,C,CAED;;;AACA,UAAUT,wBAAV,CAAmCY,MAAnC,EAAqD;EACjD,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAMlB,IAAI,CAACI,qBAAD,EAAwBqB,MAAM,CAACJ,OAA/B,CAA3B;;IACA,IAAIH,QAAQ,IAAIQ,SAAhB,EAA2B;MACvB,MAAMzB,GAAG,CAAC;QACNkB,IAAI,EAAEZ,WAAW,CAACE,YAAZ,CAAyBkB,oCADzB;QAENN,OAAO,EAAEH;MAFH,CAAD,CAAT;IAIH;EACJ,CARD,CAQE,OAAOI,GAAP,EAAY;IACVC,OAAO,CAACC,GAAR,CAAYF,GAAZ;EACH;AACJ,C,CAED;;;AACA,UAAUP,wBAAV,CAAmCU,MAAnC,EAAqD;EACjD,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAMlB,IAAI,CAACK,uBAAD,EAA0BoB,MAAM,CAACJ,OAAjC,CAA3B;IACAE,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBN,QAAxB;;IACA,IAAIA,QAAQ,IAAIQ,SAAhB,EAA2B;MACvB,MAAMzB,GAAG,CAAC;QACNkB,IAAI,EAAEZ,WAAW,CAACE,YAAZ,CAAyBmB,+BADzB;QAENP,OAAO,EAAEH;MAFH,CAAD,CAAT;IAIH;EACJ,CATD,CASE,OAAOI,GAAP,EAAY;IACVC,OAAO,CAACC,GAAR,CAAYF,GAAZ;EACH;AACJ,C,CAED;;;AACA,UAAUL,qBAAV,CAAgCQ,MAAhC,EAAkD;EAC9C,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAMlB,IAAI,CAACM,oBAAD,EAAuBmB,MAAM,CAACJ,OAA9B,CAA3B;;IACA,IAAIH,QAAQ,IAAIQ,SAAhB,EAA2B;MACvB,MAAMzB,GAAG,CAAC;QACNkB,IAAI,EAAEZ,WAAW,CAACE,YAAZ,CAAyBoB,0BADzB;QAENR,OAAO,EAAEH;MAFH,CAAD,CAAT;IAIH;EACJ,CARD,CAQE,OAAOI,GAAP,EAAY;IACVC,OAAO,CAACC,GAAR,CAAYF,GAAZ;EACH;AACJ;;AAGD,eAAe,UAAUQ,cAAV,GAA2B;EACtC,MAAM/B,GAAG,CAAC,CAACS,YAAY,EAAb,CAAD,CAAT;AACH"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nexport const DOTS = '...';\n\nconst range = (start, end) => {\n  let length = end - start + 1;\n  return Array.from({\n    length\n  }, (_, idx) => idx + start);\n};\n\nexport const usePagination = function (totalCount, pageSize) {\n  _s();\n\n  let siblingCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let currentPage = arguments.length > 3 ? arguments[3] : undefined;\n  const paginationRange = useMemo(() => {\n    const totalPageCount = Math.ceil(totalCount / pageSize); // Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\n\n    const totalPageNumbers = siblingCount + 5;\n    /*\r\n      If the number of pages is less than the page numbers we want to show in our\r\n      paginationComponent, we return the range [1..totalPageCount]\r\n    */\n\n    if (totalPageNumbers >= totalPageCount) {\n      return range(1, totalPageCount);\n    }\n\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPageCount);\n    /*\r\n      We do not want to show dots if there is only one position left \r\n      after/before the left/right page count as that would lead to a change if our Pagination\r\n      component size which we do not want\r\n    */\n\n    const shouldShowLeftDots = leftSiblingIndex > 2;\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\n    const firstPageIndex = 1;\n    const lastPageIndex = totalPageCount;\n\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      let leftItemCount = 3 + 2 * siblingCount;\n      let leftRange = range(1, leftItemCount);\n      return [...leftRange, DOTS, totalPageCount];\n    }\n\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      let rightItemCount = 3 + 2 * siblingCount;\n      let rightRange = range(totalPageCount - rightItemCount + 1, totalPageCount);\n      return [firstPageIndex, DOTS, ...rightRange];\n    }\n\n    if (shouldShowLeftDots && shouldShowRightDots) {\n      let middleRange = range(leftSiblingIndex, rightSiblingIndex);\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\n    }\n  }, [totalCount, pageSize, siblingCount, currentPage]);\n  return paginationRange;\n}; // export default usePagination;\n\n_s(usePagination, \"tLviJI6rwkyze3+kNwkFLwjvB48=\");","map":{"version":3,"names":["useMemo","DOTS","range","start","end","length","Array","from","_","idx","usePagination","totalCount","pageSize","siblingCount","currentPage","paginationRange","totalPageCount","Math","ceil","totalPageNumbers","leftSiblingIndex","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","firstPageIndex","lastPageIndex","leftItemCount","leftRange","rightItemCount","rightRange","middleRange"],"sources":["C:/Users/vpnuser/Desktop/task/adobe/src/component/common/pagination/UsePagination.tsx"],"sourcesContent":["import React from 'react';\r\nimport { useMemo } from 'react';\r\n\r\nexport const DOTS = '...';\r\n\r\nconst range = (start: number, end: number) => {\r\n    let length = end - start + 1;\r\n    return Array.from({ length }, (_, idx) => idx + start);\r\n};\r\n\r\nexport const usePagination = (totalCount: any, pageSize: any, siblingCount = 1, currentPage: any) => {\r\n\r\n    const paginationRange = useMemo(() => {\r\n        const totalPageCount = Math.ceil(totalCount / pageSize);\r\n\r\n        // Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\r\n        const totalPageNumbers = siblingCount + 5;\r\n\r\n        /*\r\n          If the number of pages is less than the page numbers we want to show in our\r\n          paginationComponent, we return the range [1..totalPageCount]\r\n        */\r\n        if (totalPageNumbers >= totalPageCount) {\r\n            return range(1, totalPageCount);\r\n        }\r\n\r\n        const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\r\n        const rightSiblingIndex = Math.min(\r\n            currentPage + siblingCount,\r\n            totalPageCount\r\n        );\r\n\r\n        /*\r\n          We do not want to show dots if there is only one position left \r\n          after/before the left/right page count as that would lead to a change if our Pagination\r\n          component size which we do not want\r\n        */\r\n        const shouldShowLeftDots = leftSiblingIndex > 2;\r\n        const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\r\n\r\n        const firstPageIndex = 1;\r\n        const lastPageIndex = totalPageCount;\r\n\r\n        if (!shouldShowLeftDots && shouldShowRightDots) {\r\n            let leftItemCount = 3 + 2 * siblingCount;\r\n            let leftRange = range(1, leftItemCount);\r\n\r\n            return [...leftRange, DOTS, totalPageCount];\r\n        }\r\n\r\n        if (shouldShowLeftDots && !shouldShowRightDots) {\r\n            let rightItemCount = 3 + 2 * siblingCount;\r\n            let rightRange = range(\r\n                totalPageCount - rightItemCount + 1,\r\n                totalPageCount\r\n            );\r\n            return [firstPageIndex, DOTS, ...rightRange];\r\n        }\r\n\r\n        if (shouldShowLeftDots && shouldShowRightDots) {\r\n            let middleRange = range(leftSiblingIndex, rightSiblingIndex);\r\n            return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\r\n        }\r\n    }, [totalCount, pageSize, siblingCount, currentPage]);\r\n\r\n    return paginationRange;\r\n};\r\n\r\n\r\n// export default usePagination;\r\n"],"mappings":";;AACA,SAASA,OAAT,QAAwB,OAAxB;AAEA,OAAO,MAAMC,IAAI,GAAG,KAAb;;AAEP,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAgBC,GAAhB,KAAgC;EAC1C,IAAIC,MAAM,GAAGD,GAAG,GAAGD,KAAN,GAAc,CAA3B;EACA,OAAOG,KAAK,CAACC,IAAN,CAAW;IAAEF;EAAF,CAAX,EAAuB,CAACG,CAAD,EAAIC,GAAJ,KAAYA,GAAG,GAAGN,KAAzC,CAAP;AACH,CAHD;;AAKA,OAAO,MAAMO,aAAa,GAAG,UAACC,UAAD,EAAkBC,QAAlB,EAAwE;EAAA;;EAAA,IAAvCC,YAAuC,uEAAxB,CAAwB;EAAA,IAArBC,WAAqB;EAEjG,MAAMC,eAAe,GAAGf,OAAO,CAAC,MAAM;IAClC,MAAMgB,cAAc,GAAGC,IAAI,CAACC,IAAL,CAAUP,UAAU,GAAGC,QAAvB,CAAvB,CADkC,CAGlC;;IACA,MAAMO,gBAAgB,GAAGN,YAAY,GAAG,CAAxC;IAEA;AACR;AACA;AACA;;IACQ,IAAIM,gBAAgB,IAAIH,cAAxB,EAAwC;MACpC,OAAOd,KAAK,CAAC,CAAD,EAAIc,cAAJ,CAAZ;IACH;;IAED,MAAMI,gBAAgB,GAAGH,IAAI,CAACI,GAAL,CAASP,WAAW,GAAGD,YAAvB,EAAqC,CAArC,CAAzB;IACA,MAAMS,iBAAiB,GAAGL,IAAI,CAACM,GAAL,CACtBT,WAAW,GAAGD,YADQ,EAEtBG,cAFsB,CAA1B;IAKA;AACR;AACA;AACA;AACA;;IACQ,MAAMQ,kBAAkB,GAAGJ,gBAAgB,GAAG,CAA9C;IACA,MAAMK,mBAAmB,GAAGH,iBAAiB,GAAGN,cAAc,GAAG,CAAjE;IAEA,MAAMU,cAAc,GAAG,CAAvB;IACA,MAAMC,aAAa,GAAGX,cAAtB;;IAEA,IAAI,CAACQ,kBAAD,IAAuBC,mBAA3B,EAAgD;MAC5C,IAAIG,aAAa,GAAG,IAAI,IAAIf,YAA5B;MACA,IAAIgB,SAAS,GAAG3B,KAAK,CAAC,CAAD,EAAI0B,aAAJ,CAArB;MAEA,OAAO,CAAC,GAAGC,SAAJ,EAAe5B,IAAf,EAAqBe,cAArB,CAAP;IACH;;IAED,IAAIQ,kBAAkB,IAAI,CAACC,mBAA3B,EAAgD;MAC5C,IAAIK,cAAc,GAAG,IAAI,IAAIjB,YAA7B;MACA,IAAIkB,UAAU,GAAG7B,KAAK,CAClBc,cAAc,GAAGc,cAAjB,GAAkC,CADhB,EAElBd,cAFkB,CAAtB;MAIA,OAAO,CAACU,cAAD,EAAiBzB,IAAjB,EAAuB,GAAG8B,UAA1B,CAAP;IACH;;IAED,IAAIP,kBAAkB,IAAIC,mBAA1B,EAA+C;MAC3C,IAAIO,WAAW,GAAG9B,KAAK,CAACkB,gBAAD,EAAmBE,iBAAnB,CAAvB;MACA,OAAO,CAACI,cAAD,EAAiBzB,IAAjB,EAAuB,GAAG+B,WAA1B,EAAuC/B,IAAvC,EAA6C0B,aAA7C,CAAP;IACH;EACJ,CAnD8B,EAmD5B,CAAChB,UAAD,EAAaC,QAAb,EAAuBC,YAAvB,EAAqCC,WAArC,CAnD4B,CAA/B;EAqDA,OAAOC,eAAP;AACH,CAxDM,C,CA2DP;;GA3DaL,a"},"metadata":{},"sourceType":"module"}